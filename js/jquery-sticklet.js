// Generated by CoffeeScript 1.4.0
(function() {
  var Range, Restriction, Target, TargetSet, targets;

  TargetSet = (function() {

    function TargetSet() {}

    TargetSet.prototype.targets = [];

    TargetSet.prototype.save = function(element, conditions) {
      var id, target;
      id = element.data('stickletId');
      target = new Target(element, conditions);
      if (!this.targets[id]) {
        id = this.targets.length;
        element.data('stickletId', id);
        return this.targets.push(target);
      } else {
        return this.targets[id] = target;
      }
    };

    TargetSet.prototype.positionAll = function() {
      var target, _i, _len, _ref, _results;
      _ref = this.targets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        _results.push(target.position());
      }
      return _results;
    };

    return TargetSet;

  })();

  Target = (function() {

    function Target(element, conditions) {
      var condition;
      this.element = element.first() || $([]);
      this.restrictions = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = conditions.length; _i < _len; _i++) {
          condition = conditions[_i];
          _results.push(new Restriction(this, condition));
        }
        return _results;
      }).call(this);
    }

    Target.prototype.position = function() {
      var range;
      range = this.getRange();
      if (range.stickTo === 'top') {
        return this.element.offset({
          top: range.min
        });
      } else {
        return this.element.offset({
          top: range.max
        });
      }
    };

    Target.prototype.getRange = function() {
      var finalRange, range, restriction, _i, _len, _ref;
      finalRange = new Range;
      _ref = this.restrictions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        restriction = _ref[_i];
        range = restriction.calculate();
        if (range.stickTo === 'top') {
          if (range.min <= finalRange.max) {
            finalRange.min = Math.max(range.min, finalRange.min);
            finalRange.stickTo = 'top';
          } else {
            return finalRange;
          }
        } else {
          if (range.max >= finalRange.min) {
            finalRange.max = Math.min(range.max, finalRange.max);
            finalRange.stickTo = 'bottom';
          } else {
            return finalRange;
          }
        }
      }
      return finalRange;
    };

    return Target;

  })();

  Restriction = (function() {

    Restriction.regex = /^(below|above|topline|bottomline)\s+(\S+)$/;

    function Restriction(target, condition) {
      var match;
      this.target = target;
      this.condition = condition;
      match = Restriction.regex.exec(condition);
      this.position = match[1];
      this.selector = match[2];
      this.element = $(this.selector);
    }

    Restriction.prototype.calculate = function() {
      var rangeMap,
        _this = this;
      rangeMap = {
        below: function() {
          return {
            min: _this.element.offset().top + _this.element.height(),
            stickTo: 'top'
          };
        },
        topLine: function() {
          return {
            min: _this.element.offset().top,
            stickTo: 'top'
          };
        },
        above: function() {
          return {
            max: _this.element.offset().top - _this.target.element.height(),
            stickTo: 'bottom'
          };
        },
        bottomLine: function() {
          return {
            max: _this.element.offset().top + _this.element.height() - _this.target.element.height(),
            stickTo: 'bottom'
          };
        }
      };
      return new Range(rangeMap[this.position]());
    };

    return Restriction;

  })();

  Range = (function() {

    function Range(options) {
      this.min = (options ? options.min : void 0) || -Number.MAX_VALUE;
      this.max = (options ? options.max : void 0) || Number.MAX_VALUE;
      this.stickTo = (options ? options.stickTo : void 0) || 'top';
    }

    return Range;

  })();

  targets = new TargetSet();

  $.fn.sticklet = function() {
    var conditions;
    conditions = arguments;
    return this.each(function() {
      return targets.save($(this), conditions);
    });
  };

  $(window).scroll(function() {
    return targets.positionAll();
  });

}).call(this);
